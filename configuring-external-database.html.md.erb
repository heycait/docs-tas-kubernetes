---
title: Configuring Your External Database
owner: Tanzu Application Service Release Engineering
---

This topic describes how to configure Tanzu Application Service for Kubernetes
(TAS for Kubernetes) to use external databases for UAA, Cloud Controller and
Usage Service.

## <a id='overview'></a>Overview

The TAS for Kubernetes UAA, Cloud Controller and Usage Service system components
require external Postgres databases.  

To create external Postgres databases for the TAS for Kubernetes system components and 
configure TAS for Kubernetes to use them:   

* [Create the External Postgres Databases](#configure-external-database) 
* [Create the External Database Configuration File](#external-database-config-file)  
 
<br>
<p class="note"><strong>Note:</strong> The YAML files in this topic us
  <code>ytt</code> syntax in their first line.
  For more information about <code>ytt</code>, see <a href="https://get-ytt.io/">ytt</a>.
</p>

## <a id='prerequisites'></a>Prerequisites

Before you begin this procedure, ensure that you have an external Postgres
database.


## <a id='configure-external-database'></a> Create the External Postgres Databases

TAS for Kubernetes uses external Postgres databases for UAA, Cloud Controller and Usage Service.

To create and configure TAS for Kubernetes Postgres databases and users:  

1. Create a database in your external Postgres database for each of the following:
    * Cloud Controller
    * UAA
    * Usage Service
1. To ensure that the databases support case-insensitive strings, 
run the following postgres command for each database:  

    ```
    CREATE EXTENSION citext
    ```
1. Establish a Certificate Authority (CA) certificate for each database.  
1. Create a service account role/user on each database.  

## <a id='external-database-config-file'></a> Create the External Database Configuration File

To configure TAS for Kubernetes to use your external Postgres databases:

1. Change directory into the `configuration-values` directory you created earlier.
1. Create a file named `values-for-db.yml` in the `configuration-values` directory.
1. Populate the `values-for-db.yml` file with the following:

    ```yaml
    #@library/ref "@github.com/cloudfoundry/cf-for-k8s"
    #@data/values
    ---
    capi:
      #@overlay/replace
      database:
        adapter: postgres
        host: "CCDB-HOSTNAME"
        port: "CCDB-PORT"
        user: "CCDB-USERNAME"
        password: "CCDB-PASSWORD"
        name: "CCDB-NAME"
        ca_cert: |
          -----BEGIN CERTIFICATE-----
          CCDB-CA-CERTIFICATE-CONTENT
          -----END CERTIFICATE-----

    uaa:
      #@overlay/replace
      database:
        adapter: postgresql
        host: "UAADB-HOSTNAME"
        port: "UAADB-PORT"
        user: "UAADB-USERNAME"
        password: "UAADB-PASSWORD"
        name: "UAADB-NAME"
        ca_cert: |
          -----BEGIN CERTIFICATE-----
          UAADB-CA-CERTIFICATE-CONTENT
          -----END CERTIFICATE-----

    #@library/ref "@github.com/pivotal/usage-service-k8s-release"
    #@data/values
    ---
    usage_service:
      #@overlay/replace
      database_hostname: "USAGE-SERVICE-DB-HOSTNAME"
      database_username: "USAGE-SERVICE-DB-USERNAME"
      database_password: "USAGE-SERVICE-DB-PASSWORD"
      database_name: "USAGE-SERVICE-DB-NAME"
    ```

    Where:
    * `CCDB-HOSTNAME` is the fully qualified domain name for your Cloud Controller database server.
    * `CCDB-PORT` is the connection port to your Cloud Controller database server.
    * `CCDB-USERNAME` is the name of the user to create to access your Cloud Controller database.
    * `CCDB-PASSWORD` is the password of the Cloud Controller database user.
    * `CCDB-NAME` is the name of the Cloud Controller database.
    * `CCDB-CA-CERTIFICATE-CONTENT` is the CA certificate or
    self-signed certificate for your Cloud Controller database. Ensure each line of the
    CA certificate value is indented four spaces, matching the indentation of
    the `BEGIN CERTIFICATE` and `END CERTIFICATE` lines above.
    * `UAADB-HOSTNAME` is the fully qualified domain name for your UAA database server.
    * `UAADB-PORT` is the connection port to your UAA database server.
    * `UAADB-USERNAME` is the name of the user to create to access your UAA database.
    * `UAADB-PASSWORD` is the password of the UAA database user.
    * `UAADB-NAME` is the name of the UAA database.
    * `UAADB-CA-CERTIFICATE-CONTENT` is the CA certificate or
    self-signed certificate for your UAA database. Ensure each line of the
    CA certificate value is indented four spaces, matching the indentation of
    the `BEGIN CERTIFICATE` and `END CERTIFICATE` lines above.
    * `USAGE-SERVICE-DB-HOSTNAME` is the fully qualified domain name for your Usage Service database server.
    * `USAGE-SERVICE-DB-USERNAME` is the name of the user to create to access your Usage Service database.
    * `USAGE-SERVICE-DB-PASSWORD` is the password of the Usage Service database user.
    * `USAGE-SERVICE-DB-NAME` is the name of the Usage Service database.
1. Save the file.
