---
title: Deploying Tanzu Application Service for Kubernetes
owner: Tanzu Application Service Release Engineering
---

This topic describes how to deploy Tanzu Application Service for Kubernetes.

<%= partial 'evaluation_only' %>

<%= partial 'limitation_notes' %>

## <a id='prerequisites'></a> Prerequisites

### <a id='command-line-tools'></a> Command-Line Tools

The installation procedure for Tanzu Application Service for Kubernetes requires the following command-line tools to be installed to your workstation:

* The Kubernetes CLI, `kubectl`. For more information, see the [Installing the Kubernetes CLI](https://docs.pivotal.io/pks/1-6/installing-kubectl-cli.html) topic.
* The `kapp` utility, version v0.22.0 or later. For more information, see the [Installing kapp](installing-kapp.html) topic.
* The `kbld` utility, version v0.19.0 or later. For more information, see the [Installing kbld](installing-kbld.html) topic.
* The `ytt` utility, version v0.26.0 or later. For more information, see the [Installing ytt](installing-ytt.html) topic.
* The v2 BOSH CLI, `bosh`. For more information, see the [Installing the BOSH CLI](installing-bosh-cli.html) topic.



### <a id='kubernetes-cluster'></a> Kubernetes Cluster

Tanzu Application Service for Kubernetes should be deployed to a Kubernetes cluster satisfying the following characteristics:

* The Kubernetes cluster should be version 1.14.x, 1.15.x, or 1.16.x.
* The Kubernetes cluster should have at least 5 worker nodes.
* Each worker node should have at least 2 CPU and 7.5GB memory available for allocation.
* The Kubernetes cluster should have a default storage class installed.

See the [Cluster Setup](cluster-setup.html) topic for more detais.

### <a id='system-domain'></a> System Domain

Select the DNS domain name you intend to use for the Tanzu Application Service for Kubernetes (for example, `sys.tas.example.com`). This domain name should be one for which you can create DNS records in a DNS zone.


## <a id='deploy'></a> Deploying Tanzu Application Service

### <a id='prepare-installation-resources'></a> Prepare the Installation Resources

Download the Tanzu Application Service for Kubernetes from [VMware Tanzu Network](https://network.pivotal.io/products/tas-for-kubernetes).

1. Log into [VMware Tanzu Network](https://network.pivotal.io).

1. Navigate to the [VMware Tanzu Application Service for Kubernetes product listing](https://network.pivotal.io/products/tas-for-kubernetes).

1. Download the "Tanzu Application Service" file and rename it to `tanzu-application-service.tar`.

1. Create a directory named `tanzu-application-service`.

1. Extract the contents of `tanzu-application-service.tar` into the `tanzu-application-service` directory.

```
tar xvf ~/Downloads/tanzu-application-service.tar -C tanzu-application-service
```

### <a id='generate-installation-parameters'></a> Generate Installation Parameters

<p class="note">
  <strong>Note:</strong> This script generates self-signed certificates on deployment.
</p>

1. Feed the script the desired system domain for the installation and redirect the output of the command for use later when deploying:

```
tanzu-application-service/bin/generate-values.sh -d "sys.cf.example.com" > /tmp/deployment-values.yml
```

### Configure System and App Registry

Tanzu Application Service retrieves container images for system components from Tanzu Network's container registry.
Supply your username and password to Tanzu Network as illustrated below. Tanzu Application Service will store
application container images for apps that developers push with `cf push` in your own registry. Supply the hostname,
repository, username, password and CA cert as described below:

```
  export YTT_TAS_system_registry__hostname="registry.pivotal.io"
  export YTT_TAS_system_registry__username="..."
  export YTT_TAS_system_registry__password="..."
  export YTT_TAS_app_registry__hostname="my-registry.example.com"
  export YTT_TAS_app_registry__repository="cf-workloads"
  export YTT_TAS_app_registry__username="..."
  export YTT_TAS_app_registry__password="..."
  export YTT_TAS_app_registry__ca="$(cat path/to/your/registry.ca)"
```

Here are the environment variables used above:

* `YTT_TAS_system_registry__hostname` is the FQDN of the Tanzu Network Registry: `registry.pivotal.io`
* `YTT_TAS_system_registry__username` is your Tanzu Network username.
* `YTT_TAS_system_registry__password` is your Tanzu Network password.
* `YTT_TAS_app_registry__hostname` is the hostname of your registry used to store images for deployed apps.
* `YTT_TAS_app_registry__repository` is the repository, namespace, project, etc. under which images should be stored.
* `YTT_TAS_app_registry__username` is the username used for push access to your registry.
* `YTT_TAS_app_registry__password` is the password used for push access to your registry.
* `YTT_TAS_app_registry__ca` is the CA certifica, optional but necessary if your registry's certificate is not signed by
a Certificate Authority in [Mozilla's included certificate list](https://wiki.mozilla.org/CA/Included_Certificates)

<p class="note">
  <strong>Note:</strong> It is also possible to add these values to the bottom of the `/tmp/deployment-values.yml`.
```
system_registry:
  hostname: registry.pivotal.io
  username: ...
  password: ...
app_registry:
  hostname: my-registry.example.com
  repository: my-registry.example.com/cf-workloads
  username: ...
  password: ...
  ca: |
----BEGIN CERTIFICATE-----
MIIDgzCC...
-----END CERTIFICATE-----
```
</p>

<p class="note">
  <strong>Note:</strong> If using a harbor project as part of the value of `YTT_TAS_app_registry__repository`, ensure the
  project is created in the harbor UI before attempting to use it with Tanzu Application Service.
</p>

### Deploy

1. Deploy Tanzu Application Service

<p class="note">
	Deploying takes approximately 10 minutes.
</p>

```
cd tanzu-application-service
bin/install-tas.sh /tmp/deployment-values.yml
```


### Post-Deployment Configuration

Create a DNS record pointing to the external IPs of the Kubernetes worker nodes to establish ingress connectivity.
	
First retrieve the IPs of the worker nodes using the `kubectl` CLI:
	
```
kubectl get nodes --output='wide'
```
	
For example:
	
```
$ kubectl get nodes --output='wide'
NAME                                   STATUS   ROLES    AGE     VERSION   INTERNAL-IP    EXTERNAL-IP
5e329c31-f1d7-4548-936b-3a58d4b166d3   Ready    <none>   5h49m   v1.15.5   10.85.87.133   10.85.87.133
a6ad3f07-787c-4d90-b8e1-032be34e9d7f   Ready    <none>   5h43m   v1.15.5   10.85.87.134   10.85.87.134
a8eb78a2-e3b4-4d8a-8c32-67bf0e13c0bf   Ready    <none>   5h43m   v1.15.5   10.85.87.135   10.85.87.135
af7dc8da-a7b0-4cf2-a940-c9248168e609   Ready    <none>   5h43m   v1.15.5   10.85.87.136   10.85.87.136
cc6ef11f-e253-4553-9cb0-bebc7d958f64   Ready    <none>   5h42m   v1.15.5   10.85.87.137   10.85.87.137
```

Then create a wildcard `A` record pointing to the IPs:
	
	*.system_domain â†’ EXTERNAL-IPs
	
### Post-Deploy Validation

Follow the [`cf-for-k8s` validation instructions](https://github.com/cloudfoundry/cf-for-k8s/blob/master/docs/deploy.md#validate-the-deployment-using-a-image-based-app)
to verify that the deployment runs successfully.
