---
title: Configuring Installation Values for Tanzu Application Service for Kubernetes
owner: Tanzu Application Service Release Engineering
---

This topic describes how to configure installation resources before deploying Tanzu Application Service for Kubernetes (TAS for Kubernetes) to a Kubernetes cluster.

## <a id='prerequisites'></a> Prerequisites

Before proceeding, complete the following sections in [Preparing to Install TAS for Kubernetes](preparing-to-install-tas-for-kubernetes.html):

* Prepare Your Installation Resources
* Ensure Your Container Registry is Accessible
* Select a System Domain Name
* Ensure Command-Line Tools Are Installed

## <a id='overview'></a> Overview of the Configuration

To configure installation values for TAS for Kubernetes, you need to modify the configuration value template.

In the parent directory that contains `tanzu-application-service`, create a new directory named `configuration-values`. Use the new directory to store configuration values for this installation.

When you are in the parent directory, duplicate the sample value file as your baseline configuration:

```
cp tanzu-application-service/sample-values.yml configuration-values/values.yml
```

The `values.yml` file gives you the flexibility to configure different parts of the system in one single file. Open it in a text editor and you'll see:

1. **System domain configuration:**

    ```yaml
    system_domain: "SYSTEM-DOMAIN"
    app_domains:
    #@overlay/append
    - "apps.SYSTEM-DOMAIN"
    ```
    Where `SYSTEM-DOMAIN` is the system domain you previously selected for your TAS for Kubernetes installation.

1. **LoadBalancer service configuration:**
    
    ```yaml
    ingress:
      load_balancer:
        enable: False
        static_external_ip: ""
      external_traffic_policy: "Local"
    ```

    Where:
    * `enable`: denotes whether to provision the Kubernetes ingress with a LoadBalancer Istio ingress service.
    * `static_external_ip` may accept a static external IP address for the LoadBalancer, if it's enabled.
    * `external_traffic_policy` denotes if this ingress desires to route external traffic to node-local or cluster-wide endpoints. For environments (like TKGs) that don't support node-local endpoints, you will need to change this value to `Cluster`.

    Keep `enable` set to `False` if you are deploying to one of these:    
    <ul>
      <li>Tanzu Kubernetes Grid on vSphere</li>
      <li>TKG Integrated Edition on vSphere with Flannel container networking</li>
    </ul>

    Change `enable` to `True` if you are deploying to one of these:
    <ul>
      <li>Tanzu Kubernetes Grid on AWS</li>
      <li>TKG Integrated Edition on AWS, Azure or GCP</li>
      <li>TKG Integrated Edition on vSphere with NSX-T container networking</li>   
    </ul>

    <p class="note">The above mentioned Kubernetes clusters support Kubernetes Services of type LoadBalancer. Enabling the LoadBalancer for your deployment will provision a load balancer for the Istio ingress gateway required by the TAS system. For more information, see <a href="https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types">Kubernetes Services</a> in the Kubernetes documentation. </p>

1. **Ingress gateway certificates configuration:**  TAS for Kubernetes requires a certificate to terminate TLS at the ingress gateway. If you are ok with self-signed TLS certificate for the ingress gateway, you can skip this step, and we will generate the certificates for you prior to the installation.

    To provide your own certificates for the ingress gateway, fill out:
    
    ```yaml
    system_certificate:
      crt: ""
      key: ""
      ca: ""
    workloads_certificate:
      crt: ""
      key: ""
      ca: ""
    ```

    Where:
    * The system certificate is for the wildcard subdomain of the system domain (e.g., `*.SYSTEM-DOMAIN`)
    * The workloads certificate is for the wildcard subdomain of the app domain (e.g., `*.apps.SYSTEM-DOMAIN`)
    * `crt` is a Base64-encoded certificate
    * `key` is a Base64-encoded private key
    * `ca` is a Base64-encoded CA certificate used to sign the respective certifcate

1. **Application containers certificates configuration:** Optionally you can provide one or more certificates for the TAS deployed applications to trust. These certificates will be injected into the application trust store, so that the applications can communicate with each other in a secure manner:
    
    ```yaml
     app_containers:
        #! PEM encoded Certificate Authority
        ca: |
          -----BEGIN CERTIFICATE-----
          FIRST-CA-CERTIFICATE-CONTENT
          -----END CERTIFICATE-----
          -----BEGIN CERTIFICATE-----
          SECOND-CA-CERTIFICATE-CONTENT
          -----END CERTIFICATE-----
    ```

    Where:
    * `CA-CERTIFICATE-CONTENT` is the CA certificate or self-signed certificate of the services or applications that you want your TAS deployed application to trust. Ensure each line of the CA certificate value is indented four spaces, matching the indentation of the `BEGIN CERTIFICATE` and `END CERTIFICATE` lines above.


1. **Application image registry configuration:**

    ```yaml
    app_registry:
      hostname: ""
      username: ""
      password: ""
      repository_prefix: ""
    ```

    For more information about configuring application image registry, see [Configuring Application Image Registries](configuring-app-image-registry.html).

1. **System image registry configuration:**

    ```yaml
    system_registry:
      hostname: ""
      username: ""
      password: ""
    ```
    For more information about configuring system image registry, see [Configuring System Image Registries](configuring-sys-image-registry.html).

1. **System databases configuration:**

    TAS for Kubernetes requires credentials to an external database.

    For instructions on how to configure the system database,
    see [Configuring Your System Databases](configuring-system-databases.html).

    ```yaml
    capi:
      database:
        host: ""
        user: cloud_controller
        password: ""
        name: cloud_controller
    uaa:
      database:
        host: ""
        user: uaa
        password: ""
        name: uaa
    usage_service:
      database:
        host: ""
        user: usage_service
        password: ""
        name: usage_service
    ```

1. **Apps Manager configration:** for more information, see [Configuring Apps Manger](configuring-apps-manager.html)
