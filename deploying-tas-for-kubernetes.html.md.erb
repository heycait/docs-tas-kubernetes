---
title: Deploying Tanzu Application Service for Kubernetes
owner: Tanzu Application Service Release Engineering
---

This topic describes how to deploy Tanzu Application Service for Kubernetes.

<%= partial 'evaluation_only' %>

<%= partial 'limitation_notes' %>

See the [Preparing to Install TAS for Kubernetes](preparing-to-install-tas-for-kubernetes.html) topic for details on installing required command-line tools and on preparing the Kubernetes cluster, app-image registry, and DNS names before installation.


## <a id='prepare-installation-resources'></a> Prepare the Installation Resources

Download the Tanzu Application Service for Kubernetes installation resources from [VMware Tanzu Network](https://network.pivotal.io/products/tas-for-kubernetes).

1. Log into [VMware Tanzu Network](https://network.pivotal.io).

1. Navigate to the [VMware Tanzu Application Service for Kubernetes product listing](https://network.pivotal.io/products/tas-for-kubernetes).

1. Download the "Tanzu Application Service" file to a local directory of your choice and rename it to `tanzu-application-service.tar`.

1. Create a directory named `tanzu-application-service` next to the Tanzu Application Service file.

1. Extract the contents of `tanzu-application-service.tar` into the `tanzu-application-service` directory:

```bash
$ tar xvf tanzu-application-service.tar -C tanzu-application-service
```

## <a id='adjust-installation-resources-networking'></a> Adjust Installation Resources for Ingress Networking (Optional)

If your Kubernetes cluster supports Kubernetes Services of type LoadBalancer, you may prefer to use that type of service to provide an ingress route to the Istio ingress gateway in the Tanzu Application Service for Kubernetes deployment.

<p class="note">
  VMware Enterprise PKS supports LoadBalancer Services when deployed to vSphere with NSX-T container networking, or when deployed to AWS, Azure, or GCP.
</p>

To enable Tanzu Application Service for Kubernetes to use a LoadBalancer service for ingress:

1. In your terminal, change into the `tanzu-application-service` directory containing the installation resources.

1. Move the `replace-loadbalancer-with-clusterip.yaml` file from the `custom-overlays` directory to the `config-optional` directory:
  <pre><code>$ mv custom-overlays/replace-loadbalancer-with-clusterip.yaml config-optional</code></pre>


## <a id='generate-configuration-values'></a> Generate Configuration Values


1. Create a directory named `configuration-values` in the same directory as the `tanzu-application-service` directory. You will use this directory to store configuration values for this installation.

1. Change into the `tanzu-application-service` directory in your terminal.

1. Run the value-generation script with the system domain you selected previous and store its output in the `configuration-values` directory:

```bash
$ ./bin/generate-values.sh -d "sys.tas.example.com" > ../configuration-values/deployment-values.yml
```

<p class="note">
  <strong>Note:</strong> The TLS certificate that the value-generation script generates to terminate TLS traffic at the system ingress gateway is self-signed.
</p>

## <a id='configure-system-registry-values'></a>Configure System Registry Values

Tanzu Application Service retrieves container images for system components from the [Tanzu Network container registry](https://registry.pivotal.io/). It does so via the following required configuration parameters:

* `system_registry.hostname`: This parameter stores the hostname of the Tanzu Network Registry. It should always be set to `registry.pivotal.io`.
* `system_registry.username`: This parameter stores the username of the Tanzu Network Registry user that will pull system component images inside the Kubernetes cluster.
* `system_registry.password`: This parameter stores the password of the Tanzu Network Registry user specified above.

You may specify these values either by environment variables or by configuration file.


#### Option 1: Environment Variables

Run the following commands in your terminal to set these configuration parameters:

```bash
$ export YTT_TAS_system_registry__hostname='registry.pivotal.io'
$ export YTT_TAS_system_registry__username='PLACEHOLDER-TANZU-NETWORK-REGISTRY-USERNAME'
$ export YTT_TAS_system_registry__password='PLACEHOLDER-TANZU-NETWORK-REGISTRY-PASSWORD'
```


#### Option 2: Configuration File

Append the following lines to the `deployment-values.yml` file you generated above:

```yaml
system_registry:
  hostname: registry.pivotal.io
  username: "PLACEHOLDER-TANZU-NETWORK-REGISTRY-USERNAME"
  password: "PLACEHOLDER-TANZU-NETWORK-REGISTRY-PASSWORD"
```

Alternatively, you may create a separate `system-registry-values.yml` file in the `configuration-values` directory that contains these lines.


## <a id='configure-app-registry-values'></a> Configure App Registry Values

Tanzu Application Service stores the container images for buildpack-based applications in a container image registry. It does so via the following required configuration parameters:

* `app_registry.hostname`: This parameter stores the hostname of the application image registry used to store the application images. This should be the fully qualified domain name of the registry, but without a URL scheme.
* `app_registry.repository`: This parameter stores the repository in the image registry that will store the application images. It should include the hostname specified above.
* `app_registry.username`: This parameter stores the username of the application image registry user that will push application images to the registry and pull them inside the Kubernetes cluster.
* `app_registry.password`: This parameter stores the password of the application image registry user specified above.
* `app_registry.ca`: This parameter stores the certificate of the certificate authority that issued the certificate for the app image registry. This is required for registry certificates not issued from a globally trusted root Certificate Authority.

You may specify these values either by environment variables or by configuration file.


#### Option 1: Environment Variables

Run the following commands in your terminal to set these configuration parameters:

```bash
$ export YTT_TAS_app_registry__hostname='my-registry.example.com'
$ export YTT_TAS_app_registry__repository='my-registry.example.com/tas-app-images'
$ export YTT_TAS_app_registry__username='PLACEHOLDER-APP-REGISTRY-USERNAME'
$ export YTT_TAS_app_registry__password='PLACEHOLDER-APP-REGISTRY-PASSWORD'
$ export YTT_TAS_app_registry__ca='PLACEHOLDER-APP-REGISTRY-CA-CERTIFICATE-CONTENTS'
```

#### Option 2: Configuration File

Append the following lines to the `deployment-values.yml` file you generated above:

```yaml
app_registry:
  hostname: my-registry.example.com
  repository: my-registry.example.com/tas-app-images
  username: "PLACEHOLDER-APP-REGISTRY-USERNAME"
  password: "PLACEHOLDER-APP-REGISTRY-PASSWORD"
  ca: |
    PLACEHOLDER-APP-REGISTRY-CA-CERTIFICATE-CONTENTS
```

Alternatively, you may create a separate `app-registry-values.yml` file in the `configuration-values` directory that contains these lines.



## <a id='configure-app-registry-values'></a> Deploy Tanzu Application Service for Kubernetes

<p class="note">
	Deploying Tanzu Application Service for Kubernetes takes approximately 10 minutes.
</p>

1. Change into the `tanzu-application-service` directory in your terminal.

2. Run the installation script, configured to use the deployment values above:

```bash
$ ./bin/install-tas.sh ../configuration-values
```


## <a id='post-installation-networking-configuration'></a> Post-Installation Networking Configuration

### DNS Configuration for Kubernetes Load Balancers

If you have deployed Tanzu Application Service for Kubernetes to [use a Kubernetes LoadBalancer Service for ingress](#adjust-installation-resources-networking), set up DNS for your system domain to route to its external IP:

1. Use `kubectl` to retrieve the value of the external IP assigned to the Istio ingress gateway service:
  <pre><code>$ kubectl -n istio-system get service istio-ingressgateway -ojsonpath='{.status.loadBalancer.ingress[0].ip}'</code></pre>
  For example:
  <pre><code>$ kubectl -n istio-system get service istio-ingressgateway -ojsonpath='{.status.loadBalancer.ingress[0].ip}'
10.193.105.162
</code></pre>

1. Create an `A` record from the wildcard system domain, `*.sys.tas.example.com`, to this external IP address.


### DNS Configuration for Worker Node Host Ports

If you have deployed Tanzu Application Service for Kubernetes to a cluster that does not support LoadBalancer Services, set up your DNS records to establish ingress connectivity directly to the worker nodes:

1. Use the `kubectl` CLI to retrieve the list of worker nodes with their external IP addresses:
  <pre><code>$ kubectl get nodes --output='wide'</code></pre>
  For example:
  <pre><code>$ kubectl get nodes --output='wide'
NAME                                   STATUS   ROLES    AGE     VERSION   INTERNAL-IP    EXTERNAL-IP
5e329c31-f1d7-4548-936b-3a58d4b166d3   Ready    \<none>   5h49m   v1.15.5   10.85.87.133   10.85.87.133
a6ad3f07-787c-4d90-b8e1-032be34e9d7f   Ready    \<none>   5h43m   v1.15.5   10.85.87.134   10.85.87.134
a8eb78a2-e3b4-4d8a-8c32-67bf0e13c0bf   Ready    \<none>   5h43m   v1.15.5   10.85.87.135   10.85.87.135
af7dc8da-a7b0-4cf2-a940-c9248168e609   Ready    \<none>   5h43m   v1.15.5   10.85.87.136   10.85.87.136
cc6ef11f-e253-4553-9cb0-bebc7d958f64   Ready    \<none>   5h42m   v1.15.5   10.85.87.137   10.85.87.137
</code></pre>

1. Create an `A` record from the wildcard system domain, `*.sys.tas.example.com`, to the set of external IP addresses for the worker nodes.


## <a id='post-installation-system-configuration'></a> Post-Installation System Configuration

To enable buildpack-based apps to run on Tanzu Application Service for Kubernetes, you must configure the system correctly after the initial installation.

1. Use the CF CLI to target the installation at the system domain configured earlier:
  <pre><code>$ cf api api.sys.tas.example.com --skip-ssl-validation</code></pre>

1. Set the `CF_ADMIN_PASSWORD` environment variable to the CF administrative password, stored in the `cf_admin_password` key in the `configuration-values/deployment-values.yml` file:
  <pre><code>$ CF\_ADMIN\_PASSWORD="$(bosh interpolate configuration-values/deployment-values.yml --path /cf\_admin\_password)"</code></pre>

1. Log into the installation as the admin user:
  <pre><code>$ cf auth admin "$CF\_ADMIN\_PASSWORD"</code></pre>

1. Enable the Diego-Docker feature flag:
  <pre><code>$ cf enable-feature-flag diego_docker</code></pre>


## <a id='post-installation-configuration'></a> Post-Installation Validation


<p class="note">
  <strong>Note:</strong> The route for the test application defaults to a subdomain of the system domain.
</p>

1. Ensure that you are still logged into the Tanzu Application Service for Kubernetes installation as the admin user.

1. Create and target an organization and space for the verification application:
  <pre><code>$ cf create-org test-org
  $ cf create-space -o test-org test-space
  $ cf target -o test-org -s test-space
  </code></pre>

1. Clone the Cloud Foundry test application from GitHub:
  <pre><code>$ git clone https://github.com/cloudfoundry-samples/test-app</code></pre>

1. Change into the `test-app` directory in your terminal.

1. Push the test app to the installation:
  <pre><code>$ cf push test-app --hostname test-app</code></pre>

1. While the `cf push` command is running, open another terminal pane and monitor the build logs:
  <pre><code>$ cf logs test-app</code></pre>

1. After the `cf push` command succeeds, make a request to the app:
  <pre><code>$ curl test-app.sys.tas.example.com</code></pre>
