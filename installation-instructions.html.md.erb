---
title: Deploying to Tanzu Application Service
owner: Tanzu Application Service Release Engineering
---

This topic describes how to deploy Tanzu Application Service.

<%= partial 'evaluation_only' %>

<%= partial 'limitation_notes' %>

## <a id='prerequisites'></a> Prerequisites

### Download the CLIs

Install the following CLIs:

* [kubectl](https://docs.pivotal.io/pks/1-6/installing-kubectl-cli.html)
* [bosh CLI](https://github.com/cloudfoundry/bosh-cli/releases)
* [k14s tools](https://k14s.io)
  * ytt (requires 0.26+)
  * kapp (requires 0.22+)
  * kbld (requires 0.17+)

### Provision the Cluster

To deploy Tanzu Application Service, the cluster should:

* be running version 1.14.x or 1.15.x
* have a minimum of 5 nodes
* have a minimum of 2 CPU, 7.5GB memory per node

Refer to [Cluster Setup](cluster-setup.html) for specific installation instructions.

### Download the Product

Download the v0.1 Alpha release from the [VMware Tanzu Network product page](https://network.pivotal.io/products/pas-for-kubernetes).

## <a id='deploy'></a> Deploying Tanzu Application Service

### Unpack the deployment artifact

1. Unpack the deployment artifact using `tar`, for example:

   mkdir -p tanzu-application-service
   tar xvf ~/Downloads/tanzu-application-service.x.x.x-build.X.tar -C tanzu-application-service

### Generate deployment values using `bosh` CLI

<p class="note">
  <strong>Note:</strong> This method is relies on the functionality
  of `bosh interpolate` command to generate the YAML file with values used to deploy.
  This script will generate self-signed certificates on deployment.
</p>

1. Feed the script the desired domain for the foundation and redirect the output of the command for use later when deploying:

   tanzu-application-service/hack/generate-values.sh "${SYSTEM_DOMAIN}" > /tmp/deployment-values.yml

### Deploy

1. Deploy Tanzu Application Service

<p class="note">
	Deploying takes approximately 10 minutes.
</p>

	export YTT_TAS_registry__server="registry.pivotal.io"
	export YTT_TAS_registry__username="..."
	export YTT_TAS_registry__password="..."
	
	cd tanzu-application-service
	bin/install-tas.sh /tmp/deployment-values.yml
	
Here are the environment variables used above:

* `YTT_TAS_registry__server` is the FQDN of the Tanzu Network Registry: `registry.pivotal.io`
* `YTT_TAS_registry__username` is your Tanzu Network username
* `YTT_TAS_registry__password` is your Tanzu Network password

### Post-Deployment Configuration

Create a DNS record pointing to the external IPs of the Kubernetes worker nodes to establish ingress connectivity.
	
First retreive the IPs of the worker nodes using the `kubectl` CLI:
	
```
kubectl get nodes --output='wide'
```
	
For example:
	
	$ kubectl get nodes --output='wide'
 	 NAME                                   STATUS   ROLES    AGE     VERSION   INTERNAL-IP    EXTERNAL-IP
 	 5e329c31-f1d7-4548-936b-3a58d4b166d3   Ready    <none>   5h49m   v1.15.5   10.85.87.133   10.85.87.133
 	 a6ad3f07-787c-4d90-b8e1-032be34e9d7f   Ready    <none>   5h43m   v1.15.5   10.85.87.134   10.85.87.134
 	 a8eb78a2-e3b4-4d8a-8c32-67bf0e13c0bf   Ready    <none>   5h43m   v1.15.5   10.85.87.135   10.85.87.135
 	 af7dc8da-a7b0-4cf2-a940-c9248168e609   Ready    <none>   5h43m   v1.15.5   10.85.87.136   10.85.87.136
 	 cc6ef11f-e253-4553-9cb0-bebc7d958f64   Ready    <none>   5h42m   v1.15.5   10.85.87.137   10.85.87.137

Then create a wildcard `A` record pointing to the IPs:
	
	*.system_domain â†’ EXTERNAL-IPs
	
### Post-Deploy Validation

Follow the [`cf-for-k8s` validation instructions](https://github.com/cloudfoundry/cf-for-k8s/blob/master/docs/deploy.md#validate-the-deployment-using-a-image-based-app)
to verify that the deployment runs successfully.
