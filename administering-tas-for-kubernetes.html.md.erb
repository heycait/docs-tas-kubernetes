---
title: Administering <%= vars.app_runtime_full %>
owner: Tanzu Application Service Release Engineering
---

This topic outlines the process for administering <%= vars.app_runtime_full %> (TAS for Kubernetes).

##<a id='administer'></a>Administer TAS for Kubernetes

To administer Tanzu Application Service (TAS) for Kubernetes after initial installation:

1. **Create TAS Orgs and Spaces**: Create orgs and spaces by following the instructions
in the _TAS for VMs Administrator Guide_,
see [Orgs, Spaces, Roles, and Permissions]
(https://docs.pivotal.io/application-service/concepts/roles.html).
<br>
    Developers create and manage their apps and service instances within spaces.
Every app, service, and route that developers create is scoped to a space.
Each space belongs to an org in the TAS installation.

1. **Create TAS Quota Plans**: Create quota plans by following the instructions
in the _TAS for VMs Administrator Guide_,
see [Creating and Modifying Quota Plans]
(https://docs.pivotal.io/application-service/adminguide/quota-plans.html).
<br>
    Quota plans are named sets of memory, service, and instance usage quotas that constrain
the usage of organizations within a TAS installation.

1. **Manage Service Brokers**: Make services available to app developers by
registering the service brokers and making the service plans public.
See
[Managing Service Brokers](https://docs.pivotal.io/application-service/services/managing-service-brokers.html)
in the _TAS for VMs Administrator Guide_.
<br>
    Developers typically need to connect their apps running on TAS to dependencies such as data services.
Service brokers give developers a self-service mechanism to provision these dependencies
and to connect them to their apps.

<p class="note warning">
  <strong>Warning:</strong> Consult <a href="release-notes.html#known-issues">Known Issues</a> in the <i>Release Notes</i>
  for details on the limitations of TAS for Kubernetes administration.
</p>
