---
title: Installing Tanzu Application Service for Kubernetes
owner: Tanzu Application Service Release Engineering
---

This topic describes how to install Tanzu Application Service for Kubernetes (TAS for Kubernetes).

<%= partial 'evaluation_only' %>

<%= partial 'limitation_notes' %>

## <a id='prerequisites'></a> Prerequisites

Before proceeding, review the [Configuring Installation Values]
(configuring-installation-values.html) topic to ensure that you have configured 
all of the required or recommended installation resources.

## <a id='install-tas-for-k8s'></a> Install TAS for Kubernetes

<p class="note">
	Installing TAS for Kubernetes takes approximately 15 minutes, depending on cluster resources and bandwidth.
</p>

1. To ensure that your Kubernetes client configuration targets the intended cluster for installation, 
run the following command and inspect the output:  

    ```bash
    kubectl cluster-info
    ```

1. Change directory into the `tanzu-application-service` directory.

1. Run the installation script, configured to use the deployment values you generated previously:

    ```bash
    ./bin/install-tas.sh ../configuration-values
    ```

## <a id='post-installation-networking-configuration'></a> Configure DNS for Ingress Gateway

To configure DNS entries for the TAS for Kubernetes ingress gateway:

* If you intend to use a Kubernetes `LoadBalancer` service for the ingress gateway:
    1. Follow the instructions in
    [Use Load Balancer Service for Ingress Gateway](configuring-installation-values.html#adjust-installation-resources-networking). 
    By default, TAS for Kubernetes does not create a Kubernetes `LoadBalancer` service 
    for the ingress gateway. 
    1. Follow the instructions in [Configure DNS With a Kubernetes Load Balancer for Ingress Gateway](#post-installation-dns-with-k8s-lb) below. 

* If you do not intend to use a Kubernetes `LoadBalancer` service for the ingress gateway, do one of the following:  
  * To configure DNS when using an external load balancer for the ingress gateway, follow
  the instructions in [Configure DNS With an External Load Balancer for Ingress Gateway](#post-installation-dns-with-lb) below.
  * To configure DNS when not using an external load balancer for the ingress gateway, follow
  the instructions in [Configure DNS Without a Load Balancer for Ingress Gateway](#post-installation-dns-no-lb) below.  

### <a id='post-installation-dns-no-lb'></a> Configure DNS Without a Load Balancer for Ingress Gateway

This section describes how to configure your DNS 
if you do not have an external load balancer to use for ingress and 
have deployed TAS for Kubernetes without a Kubernetes LoadBalancer service 
for the ingress gateway. 

To set up your DNS records to establish ingress connectivity directly to the worker nodes:

1. To retrieve the list of existing worker nodes with their external IP addresses:  

    ```
    kubectl get node --selector='!node-role.kubernetes.io/master' -o wide
    ```
    For example:
    <pre class="terminal">
    $ kubectl get node --selector='!node-role.kubernetes.io/master' -o wide
NAME                                   STATUS   ROLES    AGE     VERSION   INTERNAL-IP    EXTERNAL-IP
5e329c31-f1d7-4548-936b-3a58d4b166d3   Ready    \<none>   5h49m   v1.15.5   10.85.87.133   10.85.87.133
a6ad3f07-787c-4d90-b8e1-032be34e9d7f   Ready    \<none>   5h43m   v1.15.5   10.85.87.134   10.85.87.134
a8eb78a2-e3b4-4d8a-8c32-67bf0e13c0bf   Ready    \<none>   5h43m   v1.15.5   10.85.87.135   10.85.87.135
af7dc8da-a7b0-4cf2-a940-c9248168e609   Ready    \<none>   5h43m   v1.15.5   10.85.87.136   10.85.87.136
cc6ef11f-e253-4553-9cb0-bebc7d958f64   Ready    \<none>   5h42m   v1.15.5   10.85.87.137   10.85.87.137
</pre>

1. Create a wildcard `A` record for the system domain in your DNS zone, 
resolving to the set of external IP addresses for the worker nodes:  

    ```
    *.SYSTEM-DOMAIN
    ```
    Where `SYSTEM-DOMAIN` is the system domain. Include the `*.` wildcard prefix so that all subdomains 
    of the system domain also resolve to the IP addresses.

### <a id='post-installation-dns-with-lb'></a> Configure DNS With an External Load Balancer for Ingress Gateway

This section describes how to configure DNS 
if you have an external load balancer to use for ingress to the TAS for Kubernetes installation and
have deployed TAS for Kubernetes without a Kubernetes LoadBalancer service 
for the ingress gateway. 

To configure the external load balancer to forward HTTP and HTTPS traffic to the Kubernetes worker nodes:  

1. To retrieve the list of existing worker nodes with their internal IP addresses:

    ```
    kubectl get nodes --output='wide'
    ```
    For example:
    <pre class="terminal">
    $ kubectl get nodes --output='wide'
NAME                                   STATUS   ROLES    AGE     VERSION   INTERNAL-IP    EXTERNAL-IP
5e329c31-f1d7-4548-936b-3a58d4b166d3   Ready    \<none>   5h49m   v1.15.5   10.85.87.133   10.85.87.133
a6ad3f07-787c-4d90-b8e1-032be34e9d7f   Ready    \<none>   5h43m   v1.15.5   10.85.87.134   10.85.87.134
a8eb78a2-e3b4-4d8a-8c32-67bf0e13c0bf   Ready    \<none>   5h43m   v1.15.5   10.85.87.135   10.85.87.135
af7dc8da-a7b0-4cf2-a940-c9248168e609   Ready    \<none>   5h43m   v1.15.5   10.85.87.136   10.85.87.136
cc6ef11f-e253-4553-9cb0-bebc7d958f64   Ready    \<none>   5h42m   v1.15.5   10.85.87.137   10.85.87.137
    </pre>

1. Configure your external load balancer to forward traffic on TCP ports `80` and `443` to the set of 
internal IP addresses for the Kubernetes worker nodes.

1. Configure DNS records in your DNS zone:
    * If your load balancer has a static IP, create a wildcard `A` record for the system domain, 
        resolving to the external IP address of the load balancer:  

        ```
        *.SYSTEM-DOMAIN
        ```
        Where `SYSTEM-DOMAIN` is the system domain.  
<br>
    * If your load balancer has a DNS name instead of static IP, such as an AWS load balancer, 
        create a wildcard `CNAME` record for the system domain, 
        resolving to the external IP address of the load balancer:  

        ```
        *.SYSTEM-DOMAIN
        ```
        Where `SYSTEM-DOMAIN` is the system domain.  


    Ensure you include the `*.` wildcard prefix in the new record 
    so that all subdomains of the system domain also resolve to this IP address.

### <a id='post-installation-dns-with-k8s-lb'></a> Configure DNS With a Kubernetes Load Balancer for Ingress Gateway

This section describes how to configure DNS if you have configured TAS for Kubernetes to 
use a Kubernetes LoadBalancer Service for the ingress gateway.  

To configure DNS with your system domain resolving to the external IP of the load balancer:

1. To retrieve the value of the external IP or hostname assigned to the Istio ingress gateway service:

    ```
    kubectl -n istio-system get service istio-ingressgateway -ojsonpath='{.status.loadBalancer.ingress[0].ip}'
    kubectl -n istio-system get service istio-ingressgateway -ojsonpath='{.status.loadBalancer.ingress[0].hostname}'
    ```
    For example:
    <pre class="terminal">
    $ kubectl -n istio-system get service istio-ingressgateway -ojsonpath='{.status.loadBalancer.ingress[0].ip}'
    10.193.105.162
    $ kubectl -n istio-system get service istio-ingressgateway -ojsonpath='{.status.loadBalancer.ingress[0].hostname}'
    ae7b1093f9c3b44fd9982b828b32ccad-2445920965.us-west-2.elb.amazonaws.com
    </pre>

1. In your DNS zone, create an entry for your system domain:  
    * If you have an external ip, create a wildcard `A` record for the system domain, 
        resolving to the external IP address:  

        ```
        *.SYSTEM-DOMAIN
        ```
        Where `SYSTEM-DOMAIN` is the system domain.  
    <br>
    * If you have a hostname, create a wildcard CNAME record for the system domain, 
        resolving to the hostname:  

        ```
        *.SYSTEM-DOMAIN
        ```
        Where `SYSTEM-DOMAIN` is the system domain. 

    Ensure you include the `*.` wildcard prefix in the new record so that all subdomains of the system domain also resolve to the load balancer.

For information on configuring TAS for Kubernetes to 
use a Kubernetes LoadBalancer Service for the ingress gateway, see 
[Use a LoadBalancer Service for the Ingress Gateway](configuring-installation-values.html#adjust-installation-resources-networking),

## <a id='post-installation-system-configuration'></a> Enable Buildpack-Based Apps to Run in Kubernetes Clusters

You must configure TAS for Kubernetes to support buildpack-based apps.

To ensure the system is configured correctly for buildpack-based apps:

1. Use the CF CLI to target the installation at the `api` subdomain of the system domain:

    ```
    cf api api.SYSTEM-DOMAIN --skip-ssl-validation
    ```

    Where `SYSTEM-DOMAIN` is your TAS for Kubernetes installation system domain.  
1. Change directory into the directory containing the `tanzu-application-service` and `configuration-values` 
directories.

1. To set the `CF_ADMIN_PASSWORD` environment variable to the CF administrative password 
stored in the `cf_admin_password` key in the `configuration-values/deployment-values.yml` file:

    ```
    CF_ADMIN_PASSWORD="$(bosh interpolate configuration-values/deployment-values.yml \
            --path /cf_admin_password)"
    ```

1. Log into the installation as the admin user:

    ```
    cf auth admin "$CF_ADMIN_PASSWORD"
    ```

1. Enable the Diego-Docker feature flag to enable buildpack-based apps to run on the Kubernetes cluster:

    ```
    cf enable-feature-flag diego_docker
    ```

## <a id='post-installation-configuration'></a> Validate Your TAS for Kubernetes Installation

<p class="note">
  <strong>Note:</strong> The route for the test application defaults to a subdomain of the system domain.
</p>

To validate your TAS for Kubernetes:

1. Ensure that you are still logged in to the TAS for Kubernetes 
installation as the admin user.

1. Create and target an organization and space for the verification application. 

    For example:
    <pre class="terminal">$ cf create-org test-org
    $ cf create-space -o test-org test-space
    $ cf target -o test-org -s test-space
    </pre>

1. To clone the Cloud Foundry test application from GitHub to your workstation:

    ```
    git clone https://github.com/cloudfoundry-samples/test-app.git
    ```

    For more information see [Cloud Foundry test application](https://github.com/cloudfoundry-samples/test-app) 
    on GitHub.  

1. Change directory into the resulting `test-app` directory.


1. To push the test app to your TAS for Kubernetes installation:

    ```
    cf push test-app --hostname test-app
    ```

1. To validate the test app is running, make a request to the app after the `cf push` command succeeds:  

    ```
    curl test-app.apps.SYSTEM-DOMAIN
    ```

    Where `SYSTEM-DOMAIN` is your TAS for Kubernetes installation system domain.
