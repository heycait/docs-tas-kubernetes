---
title: Installing Tanzu Application Service for Kubernetes
owner: Tanzu Application Service Release Engineering
---

This topic describes how to install Tanzu Application Service for Kubernetes.

<%= partial 'evaluation_only' %>

<%= partial 'limitation_notes' %>

Before proceeding, review the [Configuring Installation Values](configuring-installation-values.html) topic to ensure that you have configured all of the required or recommended installation resources.


## <a id='install-tas-for-k8s'></a> Installing Tanzu Application Service for Kubernetes

<p class="note">
	Deploying Tanzu Application Service for Kubernetes takes approximately 10 minutes.
</p>

1. Change into the `tanzu-application-service` directory in your terminal.

2. Run the installation script, configured to use the deployment values you generated previously:

```bash
$ ./bin/install-tas.sh ../configuration-values
```


## <a id='post-installation-networking-configuration'></a> Post-Installation Networking Configuration

### DNS Configuration without a Kubernetes Load Balancer for Ingress Gateway

By default, Tanzu Application Service for Kubernetes is configured not to create a Kubernetes LoadBalancer service for the ingress gateway.
If you have deployed Tanzu Application Service for Kubernetes in this configuration, set up your DNS records to establish ingress connectivity directly to the worker nodes:

1. Use the `kubectl` CLI to retrieve the list of worker nodes with their external IP addresses:
  <pre><code>$ kubectl get nodes --output='wide'</code></pre>
  For example:
  <pre><code>$ kubectl get nodes --output='wide'
NAME                                   STATUS   ROLES    AGE     VERSION   INTERNAL-IP    EXTERNAL-IP
5e329c31-f1d7-4548-936b-3a58d4b166d3   Ready    \<none>   5h49m   v1.15.5   10.85.87.133   10.85.87.133
a6ad3f07-787c-4d90-b8e1-032be34e9d7f   Ready    \<none>   5h43m   v1.15.5   10.85.87.134   10.85.87.134
a8eb78a2-e3b4-4d8a-8c32-67bf0e13c0bf   Ready    \<none>   5h43m   v1.15.5   10.85.87.135   10.85.87.135
af7dc8da-a7b0-4cf2-a940-c9248168e609   Ready    \<none>   5h43m   v1.15.5   10.85.87.136   10.85.87.136
cc6ef11f-e253-4553-9cb0-bebc7d958f64   Ready    \<none>   5h42m   v1.15.5   10.85.87.137   10.85.87.137
</code></pre>

1. Create an `A` record for the wildcard system domain, `*.sys.tas.example.com`, resolving to the set of external IP addresses for the worker nodes.


### DNS Configuration with a Kubernetes Load Balancer for Ingress Gateway

If you have instead optionally configured Tanzu Application Service for Kubernetes to [use a Kubernetes LoadBalancer Service for the ingress gateway](#adjust-installation-resources-networking), set up DNS for your system domain to route to its external IP:

1. Use `kubectl` to retrieve the value of the external IP assigned to the Istio ingress gateway service:
  <pre><code>$ kubectl -n istio-system get service istio-ingressgateway -ojsonpath='{.status.loadBalancer.ingress[0].ip}'</code></pre>
  For example:
  <pre><code>$ kubectl -n istio-system get service istio-ingressgateway -ojsonpath='{.status.loadBalancer.ingress[0].ip}'
10.193.105.162
</code></pre>

1. In your DNS zone, create an `A` record for the wildcard system domain, `*.sys.tas.example.com`, resolving to this external IP address.



## <a id='post-installation-system-configuration'></a> Post-Installation System Configuration

To enable buildpack-based apps to run on Tanzu Application Service for Kubernetes, you must configure the system correctly after the initial installation.

1. Use the CF CLI to target the installation at the system domain configured earlier:
  <pre><code>$ cf api api.sys.tas.example.com --skip-ssl-validation</code></pre>

1. Set the `CF_ADMIN_PASSWORD` environment variable to the CF administrative password, stored in the `cf_admin_password` key in the `configuration-values/deployment-values.yml` file:
  <pre><code>$ CF\_ADMIN\_PASSWORD="$(bosh interpolate configuration-values/deployment-values.yml --path /cf\_admin\_password)"</code></pre>

1. Log into the installation as the admin user:
  <pre><code>$ cf auth admin "$CF\_ADMIN\_PASSWORD"</code></pre>

1. Enable the Diego-Docker feature flag to allow pushing buildpack based apps to the Kubernetes cluster:
  <pre><code>$ cf enable-feature-flag diego_docker</code></pre>


## <a id='post-installation-configuration'></a> Post-Installation Validation


<p class="note">
  <strong>Note:</strong> The route for the test application defaults to a subdomain of the system domain.
</p>

1. Ensure that you are still logged into the Tanzu Application Service for Kubernetes installation as the admin user.

1. Create and target an organization and space for the verification application:
  <pre><code>$ cf create-org test-org
  $ cf create-space -o test-org test-space
  $ cf target -o test-org -s test-space
  </code></pre>

1. Clone the [Cloud Foundry test application](https://github.com/cloudfoundry-samples/test-app) from GitHub to your workstation and change into its directory.

1. Push the test app to the installation:
  <pre><code>$ cf push test-app --hostname test-app</code></pre>

1. While the `cf push` command is running, open another terminal pane and monitor the build logs:
  <pre><code>$ cf logs test-app</code></pre>

1. After the `cf push` command succeeds, make a request to the app:
  <pre><code>$ curl test-app.sys.tas.example.com</code></pre>
