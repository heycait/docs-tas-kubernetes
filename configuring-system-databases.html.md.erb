---
title: Configuring Your System Databases
owner: Tanzu Application Service Release Engineering
---

## <a id='overview'></a>Overview

The TAS for Kubernetes system components UAA, Cloud Controller and Usage Service all require their own Postgres databases. This topic describes how to configure Tanzu Application Service for Kubernetes to use Postgres for UAA, Cloud Controller and Usage Service.

This topic describes:

  * Provision Tanzu Postgres Databases
  * Configure the Databases for the System Components

## <a id='provision-postgres-databases'></a>Provision Tanzu Postgres Databases

Ensure that you have [installed Tanzu Postgres](http://postgres-kubernetes.docs.pivotal.io/0-4/installing.html) and [created the Postgres Operator release](http://postgres-kubernetes.docs.pivotal.io/0-4/create-release.html) on your cluster.

Then to create and configure the Tanzu postgres databases for use, complete the following:

1. Create a file named `postgres-databases.yml` in the `configuration-values` directory and copy the following into the file

    ```
    apiVersion: v1
    kind: Namespace
    metadata:
      name: postgres-dbs
    ---
    apiVersion: "postgres.pivotal.io/v1"
    kind: "PostgresInstance"
    metadata:
      name: ccdb
      namespace: postgres-dbs
    spec:
      memory: "800Mi"
      cpu: "0.5"
      storageClassName: STORAGE-CLASS
      serviceType: ClusterIP
      storageSize: 300M
      pgConfig:
        dbname: cloud_controller
        username: cloud_controller
    ---
    apiVersion: "postgres.pivotal.io/v1"
    kind: "PostgresInstance"
    metadata:
      name: uaadb
      namespace: postgres-dbs
    spec:
      memory: "800Mi"
      cpu: "0.5"
      storageClassName: STORAGE-CLASS
      serviceType: ClusterIP
      storageSize: 300M
      pgConfig:
        dbname: uaa
        username: uaa
    ---
    apiVersion: "postgres.pivotal.io/v1"
    kind: "PostgresInstance"
    metadata:
      name: usagedb
      namespace: postgres-dbs
    spec:
      memory: "800Mi"
      cpu: "0.5"
      storageClassName: STORAGE-CLASS
      serviceType: ClusterIP
      storageSize: 300M
      pgConfig:
        dbname: usage_service
        username: usage_service
    ```

    where `STORAGE-CLASS` is the name of your Storage Class that you want to use for the databases.

1. Target your Kubernetes cluster and apply this file in order to create a postgres namespace and three databases for Cloud Controller, UAA, and Usage Service:

    ```bash
    kubectl apply -f postgres-databases.yml
    ```

    The hostnames for each of the databases created is as follows:

    ```bash
    USAGE-SERVICE-DB-HOSTNAME=usagedb.postgres-dbs
    UAADB-HOSTNAME=uaadb.postgres-dbs
    CCDB-HOSTNAME=ccdb.postgres-dbs
    ```

1. At this point, three databases should be provisioned. Run the following script to make sure that the databases support case-insensitivive strings:

    ```bash
    kubectl exec -it -n postgres-dbs ccdb-0 -- psql -d ccdb -c "CREATE EXTENSION citext"
    kubectl exec -it -n postgres-dbs uaadb-0 -- psql -d uaadb -c "CREATE EXTENSION citext"
    kubectl exec -it -n postgres-dbs usagedb-0 -- psql -d usagedb -c "CREATE EXTENSION citext"
    ```

1. Retrieve the password for each of the databases. This will be used when [configuring the databases for the system components](#config-databases).

    ```
    CCDBPW=`bosh interpolate --path='/data/password' <( kubectl get secret -n postgres-dbs ccdb-db-secret -o yaml ) | base64 -d`
    UAADBPW=`bosh interpolate --path='/data/password' <( kubectl get secret -n postgres-dbs uaadb-db-secret -o yaml ) | base64 -d`
    USAGEDBPW=`bosh interpolate --path='/data/password' <( kubectl get secret -n postgres-dbs usagedb-db-secret -o yaml ) | base64 -d`

    cat <<EOT
    USAGE-SERVICE-DB-PASSWORD=${USAGEDBPW}
    UAADB-PASSWORD=${UAADBPW}
    CCDB-PASSWORD=${CCDBPW}
    EOT
    ```

## <a id='config-databases'></a> Configure the Databases for the System Components

1. Change directory into the `configuration-values` directory and open the `value.yml` file.

1. Populate the system component section with the following:

    ```yaml
    capi:
      database:
        host: "CCDB-HOSTNAME"
        user: cloud_controller
        password: "CCDB-PASSWORD"
        name: cloud_controller

    uaa:
      database:
        host: "UAADB-HOSTNAME"
        user: uaa
        password: "UAADB-PASSWORD"
        name: uaa

    usage_service:
      database:
        host: "USAGE-SERVICE-DB-HOSTNAME"
        user: usage_service
        password: "USAGE-SERVICE-DB-PASSWORD"
        name: usage_service
     ```

    Where:
    * `host` is the fully qualified domain name for the respective component database server.
    * `user` is the name of the user that accesses the respective database, defaulted to the compnent name.
    * `password` is the password of database user.
    * `name` is the name of database, defaulted to its respective component name.
    * Optionally if you want to use your own CA certs for these databases, add these lines below the database name:

        ```yaml
        ca_cert: |
          -----BEGIN CERTIFICATE-----
          CCDB-CA-CERTIFICATE-CONTENT
          -----END CERTIFICATE-----
        ```
1. Save the file.

After configuring the databases, proceed to the
[Configuring Apps Manager](configuring-apps-manager.html) topic.