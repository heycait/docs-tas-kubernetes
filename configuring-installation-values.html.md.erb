---
title: Configuring Installation Values
owner: Tanzu Application Service Release Engineering
---

This topic describes how to configure installation resources before deploying Tanzu Application Service for Kubernetes (TAS for Kubernetes) to a Kubernetes cluster.

## <a id='prerequisites'></a> Prerequisites

Before proceeding, complete all sections in:  

* [Preparing to Install TAS for Kubernetes](preparing-to-install-tas-for-kubernetes.html)  
* [Installing Command-Line Tools](installing-command-line-tools.html)  

## <a id='configure-values'></a> Configure Installation Values

To configure installation values for TAS for Kubernetes, 
you need to modify a copy of the configuration values template:  

* [Copy the Configuration Values Template](#)  
* [Configure the System Domain](#configure-system-domain)  
* [Configure the Load Balancer](#configure-lb)  
* [Configure the Ingress Gateway Certificates](#configure-ingress-cert)  
* [Configure Application Container Certificates](#configure-ingress-cert)
* [Configure Additional Settings](#configure-other-sections)

### <a id='copy-template'></a> Copy the Configuration Values Template  

The configuration values template gives you the flexibility to 
configure different parts of the system in a single file. 
Use a copy of the template as your baseline configuration.   

To copy the configuration values template:  

1. Change directory to the parent directory that contains the `tanzu-application-service` directory.
1. Duplicate the sample value file:

    ```
    cp tanzu-application-service/sample-values.yml configuration-values/values.yml
    ```

    Customize the new `values.yml` as your configuration values file.
    
1. Create a new directory named `configuration-values`.  
Use the new directory to store configuration values for this installation.

The file gives you the flexibility to 
configure different parts of the system in one single file. 
Open it in a text editor and you'll see:

### <a id='configure-system-domain'></a> Configure the System Domain 

To configure you system domain:  

1. Open `values.yml` in a text editor.  
1. Locate the `system_domain` section in the `values.yml` file.  
1. Configure the system domain:

    ```yaml
    system_domain: "SYSTEM-DOMAIN"
    app_domains:
    #@overlay/append
    - "apps.SYSTEM-DOMAIN"
    ```
    Where `SYSTEM-DOMAIN` is the system domain you previously selected for your TAS for Kubernetes installation.
1. Save the `values.yml` file.  

### <a id='configure-lb'></a> Configure the Load Balancer  

To configure you LoadBalancer service:  

1. Open `values.yml` in a text editor.  
1. Locate the `load_balancer` section in the `values.yml` file.  
1. Configure the LoadBalancer service:  
    
    ```yaml
    ingress:
      load_balancer:
        enable: ENABLED
        static_external_ip: "LOAD-BALANCER"
      external_traffic_policy: "POLICY"
    ```

    Where:
    * `ENABLED` configures the provisioning of the Kubernetes ingress with a `LoadBalancer` Istio ingress service.
    To provision a `LoadBalancer` for the Istio ingress gateway required for TAS for Kubernetes, 
    enable `LoadBalancer` as follows:  
    <table>
      <tr>
        <th>Deployment Environment</th>
        <th width="20%"><code>enable</code> value</th>
      </tr>
      <tr>
        <td>Tanzu Kubernetes Grid (TKG) on vSphere</td>
        <td>`False`</td>
      </tr>
      <tr>
        <td>TKG on AWS</td>
        <td>`True`</td>
      </tr>
      <tr>
        <td>Tanzu Kubernetes Grid Integrated Edition (TKGI) on vSphere with Flannel container networking</td>
        <td>`False`</td>
      </tr>
      <tr>
        <td>TKGI on vSphere with NSX-T container networking</td>
        <td>`True`</td>
      </tr>
      <tr>
        <td>TKGI on AWS</td>
        <td>`True`</td>
      </tr>
      <tr>
        <td>TKGI on Azure</td>
        <td>`True`</td>
      </tr>
      <tr>
        <td>TKGI on GCP</td>
        <td>`True`</td>
      </tr>
    </table>  
    For more information, see [Kubernetes Services]
    (https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types) 
    in the Kubernetes documentation.  
    <br>
    * `LOAD-BALANCER` is the static external IP address for the LoadBalancer, if the load balancer is enabled.  
    * `POLICY` controls if this ingress routes external traffic to node-local or cluster-wide endpoints. 
        * For environments that support node-local endpoints, configure `external_traffic_policy` as `Local`.  
        * For TKG and other environments that do not support node-local endpoints, 
        configure `external_traffic_policy` as `Cluster`.
1. Save the `values.yml` file.  

### <a id='configure-ingress-cert'></a> Configure the Ingress Gateway Certificates  

TAS for Kubernetes requires a certificate to terminate TLS at the ingress gateway
and will generate a self-signed TLS certificate for the ingress gateway 
if you do not provide one prior to installing.  

To configure Ingress gateway certificates:  

1. Open `values.yml` in a text editor.  
1. Locate the `system_certificate` and `workloads_certificate` sections in the `values.yml` file.  
1. Configure the Ingress gateway certificates:  
    
    ```yaml
    system_certificate:
      crt: "SYSTEM-CERT"
      key: "SYSTEM-KEY"
      ca: "SYSTEM-CA"
    workloads_certificate:
      crt: "WORKLOAD-CERT"
      key: "WORKLOAD-KEY"
      ca: "WORKLOAD-CA"
    ```

    Where:
    * `SYSTEM-CERT` is the Base64-encoded certificate for the wildcard subdomain of the system domain (e.g., `*.SYSTEM-DOMAIN`)
    * `SYSTEM-KEY` is the Base64-encoded private key for the system certificate.  
    * `SYSTEM-CA` is the Base64-encoded CA certificate used to sign the system certificate.  
    * `WORKLOAD-CERT` is the Base64-encoded certificate for the wildcard subdomain of the app domain (e.g., `*.apps.SYSTEM-DOMAIN`)
    * `WORKLOAD-KEY` is the Base64-encoded private key for the workload certificate.  
    * `WORKLOAD-CA` is the Base64-encoded CA certificate used to sign the workload certificate.  
1. Save the `values.yml` file.  

### <a id='configure-ingress-cert'></a> Configure Application Container Certificates 

Optionally you can provide one or more certificates for the TAS deployed applications to trust. 
These certificates will be injected into the application trust store to 
allow applications to communicate with each other in a secure manner.  

To configure optional application container certificates:  

1. Open `values.yml` in a text editor.  
1. Locate the `app_containers` section in the `values.yml` file.  
1. Configure the app container certificates:  

    ```yaml
     app_containers:
        #! PEM encoded Certificate Authority
        ca: |
          -----BEGIN CERTIFICATE-----
          FIRST-CA-CERTIFICATE-CONTENT
          -----END CERTIFICATE-----
          -----BEGIN CERTIFICATE-----
          SECOND-CA-CERTIFICATE-CONTENT
          -----END CERTIFICATE-----
    ```

    Where:
    * `FIRST-CA-CERTIFICATE-CONTENT` is a CA certificate or self-signed certificate of a service 
    or application that you want your TAS deployed app to trust.  
    * `SECOND-CA-CERTIFICATE-CONTENT` is a CA certificate or self-signed certificate of a service 
    or application that you want your TAS deployed app to trust.  

    Ensure each line of the CA certificate value is indented four spaces, 
    matching the indentation of the surrounding `BEGIN CERTIFICATE` and `END CERTIFICATE` lines.  
1. Save the `values.yml` file.  

## <a id="next"></a> Next Steps

After you complete this procedure, complete all of the following configuration procedures:

* [Configuring Your App Image Registry](configuring-app-image-registry.html)  
* [Configuring Your System Image Registry](configuring-sys-image-registry.html)  
* [Configuring Your System Databases](configuring-system-databases.html)  
* [Configuring Apps Manger](configuring-apps-manager.html)  

<%#
1. **Application image registry configuration:**

    ```yaml
    app_registry:
      hostname: ""
      username: ""
      password: ""
      repository_prefix: ""
    ```

    For more information about configuring application image registry, see [Configuring Application Image Registries](configuring-app-image-registry.html).

1. **System image registry configuration:**

    ```yaml
    system_registry:
      hostname: ""
      username: ""
      password: ""
    ```
    For more information about configuring system image registry, see [Configuring System Image Registries](configuring-sys-image-registry.html).

1. **System databases configuration:**

    TAS for Kubernetes requires credentials to an external database.

    For instructions on how to configure the system database,
    see [Configuring Your System Databases](configuring-system-databases.html).

    ```yaml
    capi:
      database:
        host: ""
        user: cloud_controller
        password: ""
        name: cloud_controller
    uaa:
      database:
        host: ""
        user: uaa
        password: ""
        name: uaa
    usage_service:
      database:
        host: ""
        user: usage_service
        password: ""
        name: usage_service
    ```

1. **Apps Manager configration:** for more information, see [Configuring Apps Manger](configuring-apps-manager.html)
%>