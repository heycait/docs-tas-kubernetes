---
title: Deploying Tanzu Application Service for Kubernetes
owner: Tanzu Application Service Release Engineering
---

This topic describes how to deploy Tanzu Application Service for Kubernetes.

<%= partial 'evaluation_only' %>

<%= partial 'limitation_notes' %>

## <a id='prerequisites'></a> Prerequisites

### <a id='command-line-tools'></a> Command-Line Tools

The installation procedure for Tanzu Application Service for Kubernetes requires a Linux or macOS workstation with the following command-line tools installed:

* The Kubernetes CLI, `kubectl`. For more information, see the [Installing the Kubernetes CLI](https://docs.pivotal.io/pks/1-6/installing-kubectl-cli.html) topic.
* The `kapp` utility, version v0.22.0 or later. For more information, see the [Installing kapp](installing-kapp.html) topic.
* The `kbld` utility, version v0.19.0 or later. For more information, see the [Installing kbld](installing-kbld.html) topic.
* The `ytt` utility, version v0.26.0 or later. For more information, see the [Installing ytt](installing-ytt.html) topic.
* The v2 BOSH CLI, `bosh`. For more information, see the [Installing the BOSH CLI](installing-bosh-cli.html) topic.


### <a id='kubernetes-cluster'></a> Kubernetes Cluster

Tanzu Application Service for Kubernetes should be deployed to a Kubernetes cluster satisfying the following characteristics:

* The version of the Kubernetes cluster should be 1.14.x, 1.15.x, or 1.16.x.
* The Kubernetes cluster should have at least 5 worker nodes.
* Each worker node should have at least 2 CPU and 7.5GB memory available for allocation.
* The Kubernetes cluster should have a default storage class installed.

See the [Cluster Setup](cluster-setup.html) topic for more details.

### <a id='app-container-registry'></a> Container Registry for App Images

TKTKTK

<p class="note">
  <strong>Note:</strong> If using a harbor project as part of the value of `YTT_TAS_app_registry__repository`, ensure the
  project is created in the harbor UI before attempting to use it with Tanzu Application Service.
</p>


### <a id='system-domain'></a> System Domain

Select the DNS domain name you intend to use for the Tanzu Application Service for Kubernetes (for example, `sys.tas.example.com`). This domain name should be one for which you can create DNS records in a DNS zone.


## <a id='deploy'></a> Deploying Tanzu Application Service

### <a id='prepare-installation-resources'></a> Prepare the Installation Resources

Download the Tanzu Application Service for Kubernetes from [VMware Tanzu Network](https://network.pivotal.io/products/tas-for-kubernetes).

1. Log into [VMware Tanzu Network](https://network.pivotal.io).

1. Navigate to the [VMware Tanzu Application Service for Kubernetes product listing](https://network.pivotal.io/products/tas-for-kubernetes).

1. Download the "Tanzu Application Service" file and rename it to `tanzu-application-service.tar`.

1. Create a directory named `tanzu-application-service`.

1. Extract the contents of `tanzu-application-service.tar` into the `tanzu-application-service` directory.

```bash
tar xvf ~/Downloads/tanzu-application-service.tar -C tanzu-application-service
```

### <a id='generate-configuration-values'></a> Generate Configuration Values


1. Create a directory named `configuration-values` in the same directory as the `tanzu-application-service` directory. You will use this directory to store configuration values for this installation.

1. Change into the `tanzu-application-service` directory in your terminal.

1. Run the value-generation script with the system domain you selected previous and store its output in the `configuration-values` directory:

```bash
./bin/generate-values.sh -d "sys.tas.example.com" > ../configuration-values/deployment-values.yml
```

<p class="note">
  <strong>Note:</strong> The TLS certificate that the value-generation script generates to terminate TLS traffic at the system ingress gateway is self-signed.
</p>

### <a id='configure-system-registry-values'></a>Configure System Registry Values

Tanzu Application Service retrieves container images for system components from the [Tanzu Network container registry](https://registry.pivotal.io/). It does so via the following required configuration parameters:

* `system_registry.hostname`: This parameter stores the hostname of the Tanzu Network Registry. It should always be set to `registry.pivotal.io`.
* `system_registry.username`: This parameter stores the username of the Tanzu Network Registry user that will pull system component images inside the Kubernetes cluster.
* `system_registry.password`: This parameter stores the password of the Tanzu Network Registry user specified above.

You may specify these values either by environment variables or by configuration file.


#### Option 1: Environment Variables

Run the following commands in your terminal to set these configuration parameters:

```bash
export YTT_TAS_system_registry__hostname='registry.pivotal.io'
export YTT_TAS_system_registry__username='PLACEHOLDER-TANZU-NETWORK-REGISTRY-USERNAME'
export YTT_TAS_system_registry__password='PLACEHOLDER-TANZU-NETWORK-REGISTRY-PASSWORD'
```


#### Option 2: Configuration File

Append the following lines to the `deployment-values.yml` file you generated above:

```yaml
system_registry:
  hostname: registry.pivotal.io
  username: "PLACEHOLDER-TANZU-NETWORK-REGISTRY-USERNAME"
  password: "PLACEHOLDER-TANZU-NETWORK-REGISTRY-PASSWORD"
```

Alternatively, you may create a separate `system-registry-values.yml` file in the `configuration-values` directory that contains these lines.


### <a id='configure-app-registry-values'></a> Configure App Registry Values

Tanzu Application Service stores the container images for buildpack-based applications in a container image registry. It does so via the following required configuration parameters:

* `app_registry.hostname`: This parameter stores the hostname of the application image registry used to store the application images.
* `app_registry.repository`: This parameter stores the repository in the image registry that will store the application images. It should include the hostname specified above.
* `app_registry.username`: This parameter stores the username of the application image registry user that will push application images to the registry and pull them inside the Kubernetes cluster.
* `app_registry.password`: This parameter stores the password of the application image registry user specified above.
* `app_registry.ca`: This parameter stores the certificate of the certificate authority that issued the certificate for the app image registry. This is required for registry certificates not issued from a globally trusted root Certificate Authority.

You may specify these values either by environment variables or by configuration file.


#### Option 1: Environment Variables

Run the following commands in your terminal to set these configuration parameters:

```bash
export YTT_TAS_system_registry__hostname='my-registry.example.com'
export YTT_TAS_system_registry__repository='my-registry.example.com/tas-app-images'
export YTT_TAS_system_registry__username='PLACEHOLDER-APP-REGISTRY-USERNAME'
export YTT_TAS_system_registry__password='PLACEHOLDER-APP-REGISTRY-PASSWORD'
export YTT_TAS_system_registry__ca='PLACEHOLDER-APP-REGISTRY-CA-CERTIFICATE-CONTENTS'
```

#### Option 2: Configuration File

Append the following lines to the `deployment-values.yml` file you generated above:

```yaml
app_registry:
  hostname: my-registry.example.com
  repository: my-registry.example.com/tas-app-images
  username: "PLACEHOLDER-APP-REGISTRY-USERNAME"
  password: "PLACEHOLDER-APP-REGISTRY-PASSWORD"
  ca: |
    PLACEHOLDER-APP-REGISTRY-CA-CERTIFICATE-CONTENTS
```

Alternatively, you may create a separate `app-registry-values.yml` file in the `configuration-values` directory that contains these lines.



### <a id='configure-app-registry-values'></a> Deploy Tanzu Application Service for Kubernetes

<p class="note">
	Deploying takes approximately 10 minutes.
</p>

1. Change into the `tanzu-application-service` directory.

2. Run the installation script, configured to use the deployment values above:

```bash
./bin/install-tas.sh ../configuration-values
```


### Post-Deployment Configuration

Create a DNS record pointing to the external IPs of the Kubernetes worker nodes to establish ingress connectivity.
	
First retrieve the IPs of the worker nodes using the `kubectl` CLI:
	
```
kubectl get nodes --output='wide'
```
	
For example:
	
```
$ kubectl get nodes --output='wide'
NAME                                   STATUS   ROLES    AGE     VERSION   INTERNAL-IP    EXTERNAL-IP
5e329c31-f1d7-4548-936b-3a58d4b166d3   Ready    <none>   5h49m   v1.15.5   10.85.87.133   10.85.87.133
a6ad3f07-787c-4d90-b8e1-032be34e9d7f   Ready    <none>   5h43m   v1.15.5   10.85.87.134   10.85.87.134
a8eb78a2-e3b4-4d8a-8c32-67bf0e13c0bf   Ready    <none>   5h43m   v1.15.5   10.85.87.135   10.85.87.135
af7dc8da-a7b0-4cf2-a940-c9248168e609   Ready    <none>   5h43m   v1.15.5   10.85.87.136   10.85.87.136
cc6ef11f-e253-4553-9cb0-bebc7d958f64   Ready    <none>   5h42m   v1.15.5   10.85.87.137   10.85.87.137
```

Then create a wildcard `A` record pointing to the IPs:
	
	*.system_domain â†’ EXTERNAL-IPs
	

### Post-Deploy Validation

Follow the [`cf-for-k8s` validation instructions](https://github.com/cloudfoundry/cf-for-k8s/blob/master/docs/deploy.md#validate-the-deployment-using-a-image-based-app)
to verify that the deployment runs successfully.
